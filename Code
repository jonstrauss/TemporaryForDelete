
' LoadClipSection.vbs — populate Micro, Comment, then Diagnosis for a given ID
Option Explicit

'==================== CONFIG ====================
Const DO_PASTE                   = True
Const SCRUB_AFTER_PASTE          = True
Const DO_TRIM                    = True      ' trim leading/trailing blank lines

' Activation targets
Const TARGET_WINDOW_TITLE        = "Result Entry -- Webpage Dialog"  ' prefix match
Const ALT_TARGET_REGEX           = "^PathQuest.+- Work - Microsoft.*" ' regex match

' Timing
Const WAIT_AFTER_OPEN_BOX_MS     = 200
Const WAIT_AFTER_TYPE_LABEL_MS   = 80
Const WAIT_AFTER_ENTER_MS        = 120
Const WAIT_AFTER_TAB_MS          = 80
Const FALLBACK_FIXED_WAIT_MS     = 600
Const EXTRA_WAIT_BEFORE_PASTE_MS = 50
Const WAIT_BETWEEN_SECTIONS_MS   = 120
Const DEBUG_FLAG                 = False

' Alerts / guidance
Const ALERT_ONEDRIVE_MISSING     = True
Const ALERT_CLOUD_COPY_FAILED    = True
Const CLOUD_COPY_ALERT_COOLDOWN_MIN = 1440
Const OFFER_OPEN_FOLDER_ON_FAIL  = True

' Bootstrap (only when a LOCAL cache exists)
Const SEED_TO_ONEDRIVE_IF_MISSING = True
Const ALERT_ONEDRIVE_SEEDED       = True
Const OFFER_OPEN_FOLDER_ON_SEED   = True

' --- Activation + debug ---
Const REQUIRE_ACTIVATE           = True      ' stop if neither target can be activated
Const ACTIVATE_TIMEOUT_MS        = 2000
Const ACTIVATE_RETRY_INTERVAL_MS = 100
Const ACTIVATE_ALT_NUDGE         = True
Const DEBUG_SHOW_ACTIVE_TITLE    = False     ' set True temporarily to see current active title
'================================================

Dim args: Set args = WScript.Arguments
If args.Count < 1 Then Usage
Dim id4: id4 = Pad4(args(0))

Dim ws:  Set ws  = CreateObject("WScript.Shell")
Dim fso: Set fso = CreateObject("Scripting.FileSystemObject")

' Global for per-run behavior (skip Tab on PathQuest window)
Dim SKIP_TAB_THIS_RUN: SKIP_TAB_THIS_RUN = False

' ===== Resolve & cache template (OneDrive Business ↔ LOCALAPPDATA cache) =====
Dim TEMPLATE_PATH: TEMPLATE_PATH = EnsureLocalTemplate()
If Not fso.FileExists(TEMPLATE_PATH) Then Fail "Template not found: " & TEMPLATE_PATH
' ============================================================================

'-------------------- Helpers --------------------
Sub D(s) : If DEBUG_FLAG Then MsgBox s, vbInformation, "LoadClipSection" : End If : End Sub

Sub Usage()
  MsgBox "Usage:" & vbCrLf & "  wscript LoadClipSection.vbs 0001", vbInformation, "LoadClipSection"
  WScript.Quit 1
End Sub

Function Pad4(x)
  Dim s: s = Trim(CStr(x))
  If Len(s) < 4 Then s = Right("0000" & s, 4) Else s = Right(s, 4)
  Pad4 = s
End Function

Function ReadAllUtf8(p)
  Dim st: Set st = CreateObject("ADODB.Stream")
  st.Type = 2 : st.Charset = "utf-8" : st.Open
  st.LoadFromFile p
  ReadAllUtf8 = st.ReadText
  st.Close
End Function

Sub WriteAllUtf8(p, s)
  If IsNull(s) Then s = ""
  Dim st: Set st = CreateObject("ADODB.Stream")
  st.Type = 2 : st.Charset = "utf-8" : st.Open
  st.WriteText s
  st.Position = 0
  st.SaveToFile p, 2
  st.Close
End Sub

Sub SetClipboardText(s)
  If IsNull(s) Then s = ""
  Dim tf, cmd
  tf = fso.BuildPath(ws.ExpandEnvironmentStrings("%TEMP%"), "clip_set.txt")
  WriteAllUtf8 tf, s
  cmd = "%ComSpec% /c chcp 65001>nul & type """ & tf & """ | clip"
  ws.Run cmd, 0, True
  On Error Resume Next: fso.DeleteFile tf, True: On Error GoTo 0
End Sub

Function TrimCRLF(s)
  Dim t: t = s
  Do While Len(t) > 0 And InStr(1, " " & vbTab & vbCr & vbLf, Left(t,1), vbBinaryCompare) > 0
    t = Mid(t,2)
  Loop
  Do While Len(t) > 0 And InStr(1, " " & vbTab & vbCr & vbLf, Right(t,1), vbBinaryCompare) > 0
    t = Left(t,Len(t)-1)
  Loop
  TrimCRLF = t
End Function

Function GetSection(ByVal content, ByVal prefix, ByVal id4)
  Dim startTag, endTag, p1, p2, s
  startTag = "#" & prefix & "_" & id4 & "#"
  endTag   = "#END " & prefix & "_" & id4 & "#"
  p1 = InStr(1, content, startTag, vbTextCompare)
  If p1 = 0 Then GetSection = "" : Exit Function
  p1 = p1 + Len(startTag)
  p2 = InStr(p1, content, endTag, vbTextCompare)
  If p2 = 0 Then GetSection = "" : Exit Function
  s = Mid(content, p1, p2 - p1)
  If DO_TRIM Then s = TrimCRLF(s)
  GetSection = s
End Function

Sub Fail(msg)
  MsgBox "[LoadClipSection] " & msg, vbCritical, "LoadClipSection"
  WScript.Quit 2
End Sub

' --- Debug: get CURRENT active window title (hidden PowerShell) ---
Function GetActiveWindowTitle()
  On Error Resume Next
  Dim tf, ps, ex, out
  tf = fso.BuildPath(ws.ExpandEnvironmentStrings("%TEMP%"), "get_active_title.ps1")
  ps = "$code = @'" & vbCrLf & _
       "using System;" & vbCrLf & _
       "using System.Text;" & vbCrLf & _
       "using System.Runtime.InteropServices;" & vbCrLf & _
       "public static class FgWin {" & vbCrLf & _
       " [DllImport(""user32.dll"")] public static extern IntPtr GetForegroundWindow();" & vbCrLf & _
       " [DllImport(""user32.dll"", CharSet=CharSet.Auto, SetLastError=true)]" & vbCrLf & _
       " public static extern int GetWindowText(IntPtr hWnd, StringBuilder sb, int maxCount);" & vbCrLf & _
       "}" & vbCrLf & _
       "'@" & vbCrLf & _
       "Add-Type -TypeDefinition $code" & vbCrLf & _
       "$h=[FgWin]::GetForegroundWindow()" & vbCrLf & _
       "$sb=New-Object System.Text.StringBuilder 1024" & vbCrLf & _
       "[FgWin]::GetWindowText($h,$sb,$sb.Capacity) | Out-Null" & vbCrLf & _
       "$sb.ToString()"
  WriteAllUtf8 tf, ps
  Set ex = ws.Exec("powershell -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File """ & tf & """")
  out = ex.StdOut.ReadAll
  GetActiveWindowTitle = Trim(out)
  On Error Resume Next: fso.DeleteFile tf, True: On Error GoTo 0
End Function

' --- Find a window whose title matches a regex (case-insensitive), return exact title ---
Function FindWindowTitleByRegex(ByVal pattern, ByVal timeoutMs)
  Dim deadline: deadline = DateAdd("s", timeoutMs/1000, Now)
  Dim tf, ps, ex, out, patt
  patt = Replace(pattern, """", """""") ' escape quotes for PS
  tf = fso.BuildPath(ws.ExpandEnvironmentStrings("%TEMP%"), "find_window_by_regex.ps1")
  ps = "$code = @'" & vbCrLf & _
       "using System;" & vbCrLf & _
       "using System.Text;" & vbCrLf & _
       "using System.Collections.Generic;" & vbCrLf & _
       "using System.Runtime.InteropServices;" & vbCrLf & _
       "public static class WinEnum {" & vbCrLf & _
       " public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);" & vbCrLf & _
       " [DllImport(""user32.dll"")] public static extern bool EnumWindows(EnumWindowsProc lpEnumFunc, IntPtr lParam);" & vbCrLf & _
       " [DllImport(""user32.dll"")] public static extern bool IsWindowVisible(IntPtr hWnd);" & vbCrLf & _
       " [DllImport(""user32.dll"", CharSet=CharSet.Auto, SetLastError=true)]" & vbCrLf & _
       " public static extern int GetWindowText(IntPtr hWnd, StringBuilder sb, int maxCount);" & vbCrLf & _
       "}" & vbCrLf & _
       "'@" & vbCrLf & _
       "Add-Type -TypeDefinition $code" & vbCrLf & _
       "$r = New-Object System.Collections.Generic.List[string]" & vbCrLf & _
       "[WinEnum]::EnumWindows({ param($h,$l)" & vbCrLf & _
       " if([WinEnum]::IsWindowVisible($h)){" & vbCrLf & _
       "  $sb=New-Object System.Text.StringBuilder 2048" & vbCrLf & _
       "  [WinEnum]::GetWindowText($h,$sb,$sb.Capacity) | Out-Null" & vbCrLf & _
       "  $t=$sb.ToString()" & vbCrLf & _
       "  if($t -match """ & patt & """){ $r.Add($t) }" & vbCrLf & _
       " }" & vbCrLf & _
       " $true }, [IntPtr]::Zero) | Out-Null" & vbCrLf & _
       "if($r.Count -gt 0){ $r[0] }"
  WriteAllUtf8 tf, ps

  Do
    Set ex = ws.Exec("powershell -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File """ & tf & """")
    out = Trim(ex.StdOut.ReadAll)
    If Len(out) > 0 Then
      FindWindowTitleByRegex = out
      Exit Function
    End If
    WScript.Sleep ACTIVATE_RETRY_INTERVAL_MS
  Loop While Now < deadline

  FindWindowTitleByRegex = ""
  On Error Resume Next: fso.DeleteFile tf, True: On Error GoTo 0
End Function

' --- Try to activate a window by (prefix) title with retries ---
Function TryActivateWindow(ByVal title, ByVal timeoutMs)
  Dim tEnd: tEnd = DateAdd("s", timeoutMs/1000, Now)
  Do
    If ws.AppActivate(title) Then
      TryActivateWindow = True
      Exit Function
    End If
    If ACTIVATE_ALT_NUDGE Then ws.SendKeys "%"
    WScript.Sleep ACTIVATE_RETRY_INTERVAL_MS
  Loop While Now < tEnd
  TryActivateWindow = False
End Function

Sub PopulateSection(ByVal label, ByVal partLetter, ByVal textToPaste)
  If Len(textToPaste) = 0 Then D "Skip " & label & " — no snippet for " & id4 : Exit Sub

  ws.SendKeys "%n"                                ' Alt+N
  WScript.Sleep WAIT_AFTER_OPEN_BOX_MS
  ws.SendKeys label & " " & partLetter            ' e.g., "Micro A"
  WScript.Sleep WAIT_AFTER_TYPE_LABEL_MS
  ws.SendKeys "{ENTER}"
  WScript.Sleep WAIT_AFTER_ENTER_MS

  If Not SKIP_TAB_THIS_RUN Then
    ws.SendKeys "{TAB}"
    WScript.Sleep WAIT_AFTER_TAB_MS
  End If

  SetClipboardText textToPaste
  If FALLBACK_FIXED_WAIT_MS > 0 Then WScript.Sleep FALLBACK_FIXED_WAIT_MS
  If DO_PASTE Then
    If EXTRA_WAIT_BEFORE_PASTE_MS > 0 Then WScript.Sleep EXTRA_WAIT_BEFORE_PASTE_MS
    ws.SendKeys "^v"
    WScript.Sleep 100
  End If

  If SCRUB_AFTER_PASTE Then
    WScript.Sleep 150
    SetClipboardText ""
  End If

  If WAIT_BETWEEN_SECTIONS_MS > 0 Then WScript.Sleep WAIT_BETWEEN_SECTIONS_MS
End Sub

' ----- OneDrive Business ↔ LOCALAPPDATA cache (copy if cloud newer; seed if LOCAL exists) -----
Function EnsureLocalTemplate()
  Dim localRoot, cacheDir, cachePath
  localRoot = ws.ExpandEnvironmentStrings("%LOCALAPPDATA%")
  cacheDir  = localRoot & "\JSS_SplitterWithoutAvocado"
  If Not fso.FolderExists(cacheDir) Then On Error Resume Next: fso.CreateFolder cacheDir: On Error GoTo 0
  cachePath = cacheDir & "\SplitterTemplates_WithoutAvocado.txt"

  ' Resolve OneDrive for Business root
  Dim odBizRoot: odBizRoot = ws.ExpandEnvironmentStrings("%OneDriveCommercial%")

  ' If OneDrive is not available:
  If Len(odBizRoot) = 0 Or InStr(odBizRoot, "%OneDriveCommercial%") > 0 Then
    If fso.FileExists(cachePath) Then
      If ALERT_ONEDRIVE_MISSING Then MsgBox "OneDrive for Business is not available for this profile." & vbCrLf & "Using cached template: " & cachePath, vbExclamation, "LoadClipSection"
      EnsureLocalTemplate = cachePath
      Exit Function
    Else
      Fail "Template not found locally and OneDrive is unavailable." & vbCrLf & "Please install your template at:" & vbCrLf & cachePath
    End If
  End If

  ' Expected OneDrive folder/file
  Dim oneDocsDir, cloudPath
  oneDocsDir = odBizRoot & "\Documents\JSS_SplitterWithoutAvocado"
  cloudPath  = oneDocsDir & "\SplitterTemplates_WithoutAvocado.txt"

  ' If local cache exists but cloud folder/file is missing → seed cloud from LOCAL
  If fso.FileExists(cachePath) Then
    If Not fso.FolderExists(oneDocsDir) Then
      If SEED_TO_ONEDRIVE_IF_MISSING Then On Error Resume Next: fso.CreateFolder oneDocsDir: On Error GoTo 0
    End If
    If fso.FolderExists(oneDocsDir) And Not fso.FileExists(cloudPath) Then
      If SEED_TO_ONEDRIVE_IF_MISSING Then
        On Error Resume Next
        fso.CopyFile cachePath, cloudPath, True
        If Err.Number = 0 Then
          If ALERT_ONEDRIVE_SEEDED Then MsgBox "Template was created in OneDrive at:" & vbCrLf & cloudPath & vbCrLf & "You can edit your template there going forward.", vbInformation, "LoadClipSection"
          If OFFER_OPEN_FOLDER_ON_SEED Then ws.Run "explorer.exe """ & oneDocsDir & """", 1, False
        Else
          Err.Clear
        End If
        On Error GoTo 0
      End If
    End If
  End If

  ' Normal path: copy down if cloud newer
  If fso.FileExists(cloudPath) Then
    Dim doCopy: doCopy = False
    If Not fso.FileExists(cachePath) Then
      doCopy = True
    Else
      Dim fl, fc: Set fl = fso.GetFile(cachePath): Set fc = fso.GetFile(cloudPath)
      If fc.DateLastModified > fl.DateLastModified Then doCopy = True
    End If

    If doCopy Then
      On Error Resume Next
      fso.CopyFile cloudPath, cachePath, True
      If Err.Number <> 0 Then
        Dim sidecar, showAlert: showAlert = True
        sidecar = cacheDir & "\.lastcopyfail"
        If fso.FileExists(sidecar) Then
          Dim scf: Set scf = fso.GetFile(sidecar)
          If DateDiff("n", scf.DateLastModified, Now) < CLOUD_COPY_ALERT_COOLDOWN_MIN Then showAlert = False
        End If
        Dim ts: Set ts = fso.OpenTextFile(sidecar, 2, True): ts.Write "fail": ts.Close

        If ALERT_CLOUD_COPY_FAILED And showAlert Then
          MsgBox "Could not copy updated template from OneDrive (likely cloud-only or locked):" & vbCrLf & cloudPath & vbCrLf & vbCrLf & _
                 "Tip: Right-click the folder and choose 'Always keep on this device' so it's always local." & vbCrLf & _
                 "Continuing with cached template if available.", vbInformation, "LoadClipSection"
          If OFFER_OPEN_FOLDER_ON_FAIL Then ws.Run "explorer.exe """ & oneDocsDir & """", 1, False
        End If
        Err.Clear
        If Not fso.FileExists(cachePath) Then Fail "Could not retrieve a template from OneDrive and no local template exists." & vbCrLf & "Please install your template at:" & vbCrLf & cachePath
      End If
      On Error GoTo 0
    End If

    EnsureLocalTemplate = cachePath
    Exit Function
  End If

  ' Cloud file not present here
  If fso.FileExists(cachePath) Then
    EnsureLocalTemplate = cachePath
  Else
    Fail "Template not found in OneDrive and no local template exists." & vbCrLf & "Please install your template at:" & vbCrLf & cachePath & vbCrLf & "After that, this script will seed OneDrive automatically."
  End If
End Function
' -------------------------------------------------------------------------------

'-------------------- Activation --------------------
If DEBUG_SHOW_ACTIVE_TITLE Then
  Dim awt: awt = GetActiveWindowTitle()
  MsgBox "Active window title is:" & vbCrLf & IIf(Len(awt)=0, "(unknown / PowerShell blocked)", """" & awt & """"), vbInformation, "LoadClipSection — Debug"
End If

Dim activated: activated = False

' Try primary (exact/prefix) target first
If Len(TARGET_WINDOW_TITLE) > 0 Then
  activated = TryActivateWindow(TARGET_WINDOW_TITLE, ACTIVATE_TIMEOUT_MS)
End If

' If that failed, try regex target and skip Tab if we match it
If Not activated And Len(ALT_TARGET_REGEX) > 0 Then
  Dim matchTitle: matchTitle = FindWindowTitleByRegex(ALT_TARGET_REGEX, ACTIVATE_TIMEOUT_MS)
  If Len(matchTitle) > 0 Then
    activated = ws.AppActivate(matchTitle)
    If activated Then SKIP_TAB_THIS_RUN = True
  End If
End If

If Not activated And REQUIRE_ACTIVATE Then
  MsgBox "Couldn't activate either target window." & vbCrLf & _
         "Primary (prefix): " & TARGET_WINDOW_TITLE & vbCrLf & _
         "Alternate (regex): " & ALT_TARGET_REGEX & vbCrLf & vbCrLf & _
         "Bring the correct window to the front and run again.", vbExclamation, "LoadClipSection"
  WScript.Quit 3
End If

If activated Then WScript.Sleep 100

'-------------------- Main --------------------
Dim content: content = ReadAllUtf8(TEMPLATE_PATH)

Dim snMicro, snComment, snDx
snMicro   = GetSection(content, "MICRO",     id4)
snComment = GetSection(content, "COMMENT",   id4)
snDx      = GetSection(content, "DIAGNOSIS", id4)

If Len(snMicro) = 0 And Len(snComment) = 0 And Len(snDx) = 0 Then
  Fail "No sections found for ID " & id4 & ". Check your markers."
End If

Dim part, ttl
ttl = "LoadClipSection — Choose Part"
Do
  part = InputBox("Enter part letter (A–Z):", ttl, "A")
  If StrComp(part, "", vbBinaryCompare) = 0 Then WScript.Quit 0 ' Cancel
  part = UCase(Trim(part))
Loop Until (Len(part) = 1 And Asc(part) >= 65 And Asc(part) <= 90)

PopulateSection "Micro", part, snMicro
PopulateSection "Comm",  part, snComment
PopulateSection "Dx",    part, snDx

WScript.Quit 0
